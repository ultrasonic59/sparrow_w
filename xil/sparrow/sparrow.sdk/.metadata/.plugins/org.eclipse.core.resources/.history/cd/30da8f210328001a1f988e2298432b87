
#include "xparameters.h"
#include "sleep.h"
#include "xiicps.h"
#include "xgpiops.h"
#include "xuartps.h"

#include "xil_printf.h"
#include "xplatform_info.h"
#include "sparrow_fpga_mm.h"
///========================================
#define RST_DAC_PIN 8
#define RST_ADC_PIN 0
////#define MUX_PIN 9
////extern int chk_key(void) ;
extern int mod_wr_spi_ad(u8 i_addr,u8 i_data);
extern int mod_rd_spi_ad(u8 i_addr,u8 *odata );
extern void reset_adc(void);
extern uint16_t rd_data_ad(void);
extern void init_adc(void);

volatile uint16_t *udef_base_addr;

XGpioPs Gpio;

int chk_key(void)
{
return XUartPs_IsReceiveData(STDOUT_BASEADDRESS);
}
uint8_t get_key(void)
{
return XUartPs_RecvByte(STDOUT_BASEADDRESS)	;
}

int init_mio_gpio(void)
{
int Status;
XGpioPs_Config *GPIOConfigPtr;
///GPIO Initilization
GPIOConfigPtr = XGpioPs_LookupConfig(XPAR_PS7_GPIO_0_DEVICE_ID);
Status = XGpioPs_CfgInitialize(&Gpio, GPIOConfigPtr, GPIOConfigPtr ->BaseAddr);
if (Status != XST_SUCCESS) {
return XST_FAILURE;
}
XGpioPs_SetDirectionPin(&Gpio, RST_DAC_PIN, 1);
XGpioPs_SetOutputEnablePin(&Gpio, RST_DAC_PIN, 1);

XGpioPs_SetDirectionPin(&Gpio, RST_ADC_PIN, 1);
XGpioPs_SetOutputEnablePin(&Gpio, RST_ADC_PIN, 1);

///XGpioPs_SetDirectionPin(&Gpio, MUX_PIN, 1);
////XGpioPs_SetOutputEnablePin(&Gpio, MUX_PIN, 1);

return 	XST_SUCCESS;
}
void put_rst_dac(int on_off)
{
if(on_off&0x1)
	XGpioPs_WritePin(&Gpio, RST_DAC_PIN, 0x1);
else
	XGpioPs_WritePin(&Gpio, RST_DAC_PIN, 0x0);

}

void put_rst_adc(uint8_t on_off)
{
if(on_off&0x1)
	XGpioPs_WritePin(&Gpio, RST_ADC_PIN, 0x1);
else
	XGpioPs_WritePin(&Gpio, RST_ADC_PIN, 0x0);
}
#if 0
void put_mux(uint8_t on_off)
{
if(on_off&0x1)
	XGpioPs_WritePin(&Gpio, MUX_PIN, 0x1);
else
	XGpioPs_WritePin(&Gpio, MUX_PIN, 0x0);
}
#endif

///=======================================
uint16_t rd_dat_trk(uint16_t addr)
{
uint16_t rez;
uint16_t *udef_addr=(uint16_t*)XPAR_M_AXI_BASEADDR;
///spi1_mutex_lock();
rez= *(udef_addr+addr);
///printf("\n\r rd_dat_addr_m[%x:%x]",rez,addr);
///spi1_mutex_unlock();
return rez;
}
void wr_dat_trk(uint16_t addr,uint16_t dat)
{
volatile uint16_t *udef_addr=(uint16_t*)XPAR_M_AXI_BASEADDR;
*(udef_addr+addr)=dat;

}
void set_spd_spi(uint8_t i_div)
{
wr_dat_trk(ADDR_SPD_SPI,i_div);
}

void wr_spi_dat(uint8_t i_addr,uint16_t i_data)
{
uint16_t _tst;
wr_dat_trk(ADDR_CNF_SPI,0);/// no inv sck

wr_dat_trk(ADDR_SPI_CS_A,0x1);///cs=0
i_addr&=0x7f;///write
wr_dat_trk(ADDR_SPI_WR_DATA,i_addr);
for(;;)
{
_tst=rd_dat_trk(ADDR_SPI_RDY);
if((_tst&SPI_BUSY_BIT)==0)
	break;
}
wr_dat_trk(ADDR_SPI_WR_DATA,i_data>>8);
for(;;)
{
_tst=rd_dat_trk(ADDR_SPI_RDY);
if((_tst&SPI_BUSY_BIT)==0)
	break;
}
wr_dat_trk(ADDR_SPI_WR_DATA,i_data&0xff);
for(;;)
{
_tst=rd_dat_trk(ADDR_SPI_RDY);
if((_tst&SPI_BUSY_BIT)==0)
	break;
}
wr_dat_trk(ADDR_SPI_CS_A,0x0);

}
uint16_t rd_spi_dat(uint8_t i_addr)
{
uint16_t rez;
uint16_t _tst;
wr_dat_trk(ADDR_SPI_CS_A,0x1);
i_addr|=(0x1<<7);///read
wr_dat_trk(ADDR_SPI_WR_DATA,i_addr);///set addr
for(;;)
{
_tst=rd_dat_trk(ADDR_SPI_RDY);
if((_tst&SPI_BUSY_BIT)==0)
	break;
}
wr_dat_trk(ADDR_SPI_REQ_DATA,0);
for(;;)
{
_tst=rd_dat_trk(ADDR_SPI_RDY);
if((_tst&SPI_BUSY_BIT)==0)
	break;
}
_tst=rd_dat_trk(ADDR_SPI_RD_DATA);
rez=_tst&0xff;
rez<<=8;
wr_dat_trk(ADDR_SPI_REQ_DATA,0);
for(;;)
{
_tst=rd_dat_trk(ADDR_SPI_RDY);
if((_tst&SPI_BUSY_BIT)==0)
	break;
}
_tst=rd_dat_trk(ADDR_SPI_RD_DATA);
rez|= _tst&0xff;
wr_dat_trk(ADDR_SPI_CS_A,0x0);///cs=1
return rez;
}
void reset_dac(void)
{
put_rst_dac(0x0);
usleep(20);
put_rst_dac(0x1);
}
void init_dac(void)
{
///	int ii;
///uint16_t tst;
reset_dac();
wr_dat_trk(ADDR_SPI_CS_A,0x0);///ncs =1
///wr_spi_dat(0,tst);	///
///===========================
///wr_spi_dat(0x00 ,0x4EC);
wr_spi_dat(0x00 ,0x46FC);
wr_spi_dat(0x01 ,0x401E);
wr_spi_dat(0x02 ,0x3F80);
///wr_spi_dat(0x03 ,0x1C71);
wr_spi_dat(0x03 ,0x1);
wr_spi_dat(0x08 ,0x6000);
wr_spi_dat(0x09 ,0x8000);
wr_spi_dat(0x0A, 0xF080);
wr_spi_dat(0x14 ,0x0000);
wr_spi_dat(0x01 ,0x401E);
wr_spi_dat(0x01 ,0x403E);
wr_spi_dat(0x01 ,0x401E);
/*
for(ii=0;ii<0x15;ii++)
{
tst=rd_spi_dat(ii);
xil_printf( "\r\n[%x][%x]",ii,tst);
}
*/
///===========================
#if 0
////wr_spi_dat(ADDR_CONFIG2,0x7f<<7);	///lvdsdata ena
tst=rd_spi_dat(ADDR_CONFIG0);
xil_printf( "\r\n0[%x]",tst);
tst &= ~((0x1<<3)|(0x1<<4)|(0x1<<14));
wr_spi_dat(ADDR_CONFIG0,tst);	///
tst=rd_spi_dat(ADDR_CONFIG0);
xil_printf( "\r\n0a[%x]",tst);

tst=rd_spi_dat(ADDR_CONFIG1);
xil_printf( "\r\n1[%x]",tst);

///tst |= iotest_ena_bit;
tst &= ~fullwordinterface_ena_bit;
wr_spi_dat(ADDR_CONFIG1,tst);	///lvdsdata ena
tst=rd_spi_dat(ADDR_CONFIG1);
xil_printf( "\r\n1a[%x]",tst);
tst=rd_spi_dat(ADDR_CONFIG2);
xil_printf( "\r\n2[%x]",tst);
#endif
}
/*
void clr_fifo_sniff(void)
{
wr_dat_trk(ADDR_FIFO_CLR,0x1);
}
uint16_t rd_dat_fifo_sniff(void)
{
return 	rd_dat_trk(ADDR_FIFO_RD);
}
uint16_t rd_cnt_fifo_sniff(void)
{
return 	rd_dat_trk(ADDR_FIFO_CNT);
}
*/
/*
#define MAX_CNT_BYTES 4
#define MAX_LEN_BUFF 2048
uint8_t sniff_buff[MAX_LEN_BUFF];
int obr_sniff(void)
{
uint16_t t_cnt;
uint16_t ii;
uint16_t tst;

t_cnt=rd_cnt_fifo_sniff();
for(ii=0;ii<t_cnt;ii++)
	{
	tst=rd_dat_fifo_sniff();
	}
return 0;
	}
*/
///==============================================
int main( void )
{
int status;
int ii;
int key=0;
uint8_t btst=0;
uint16_t tst;
uint16_t prev;
uint16_t t_cnt;
uint8_t cnt_bytes=0;

///========================
////	udef_base_addr=(uint16_t*)ADDR_UG;
///========================
xil_printf( "\r\nSparrow test\r\n" );
init_mio_gpio() ;
usleep(1000);
set_spd_spi(18);
init_dac();

#if 1
///	set_spd_spi(18);
///	set_spd_spi(20);
	init_adc();

for(;;)
{
///clr_fifo_sniff();
if(	chk_key())
	{
	key=inbyte();
	xil_printf( "\r\n[%x]",key);
	switch(key)
	{
	case'c':
		{
			reset_adc();
////		xil_printf( "\r\n[%x]-rest fifo",key);
////		clr_fifo_sniff();
////		usleep(1000);
////		cnt_bytes=0;
		}
		break;
	case'i':
		init_adc();
		break;
	case'0':
	case'1':
	case'2':
	case'3':
	case'4':
	case'5':
		mod_wr_spi_ad(0x25,key&0x7);
		xil_printf( "\r\nwr_ad[0x25][%x]",key&0x7);
///		mod_rd_spi_ad(0x25,&btst );
///		xil_printf( "\r\nrd_ad[0x25][%x]",btst);

		break;
	case'r':
		{
		mod_wr_spi_ad(0x0,0x1); ///ena read

///		xil_printf( "\r\n[%x]-rest fifo",key);
		mod_rd_spi_ad(0x41,&btst );
		xil_printf( "\r\nrd_ad41[%x]",btst);
		mod_wr_spi_ad(0x0,0x0); ///

		}
		break;
	case's':
		{
		mod_wr_spi_ad(0x0,0x1); ///ena read

///		xil_printf( "\r\n[%x]-rest fifo",key);
////		mod_rd_spi_ad(0x41,&btst );
		xil_printf( "\r\nset read");

		}
		break;
	case'q':
		{
		mod_wr_spi_ad(0x0,0x0); ///ena wr

///		xil_printf( "\r\n[%x]-rest fifo",key);
////		mod_rd_spi_ad(0x41,&btst );
		xil_printf( "\r\nreset read");

		}
		break;
	case'v':
		{
		mod_rd_spi_ad(0x25,&btst );
		xil_printf( "\r\nrd_ad25[%x]",btst);
		mod_rd_spi_ad(0x3d,&btst );
		xil_printf( "\r\nrd_ad3d[%x]",btst);
		mod_rd_spi_ad(0x41,&btst );
		xil_printf( "\r\nrd_ad41[%x]",btst);
		mod_rd_spi_ad(0xdf,&btst );
		xil_printf( "\r\nrd_addf[%x]",btst);
		}
		break;
	case'b':
		{
		mod_rd_spi_ad(0x25,&btst );
		xil_printf( "\r\nrd_ad25[%x]",btst);
		}
		break;

	case'w':
		{
///		xil_printf( "\r\n[%x]-rest fifo",key);
		mod_wr_spi_ad(0x25,0x01);
		}
		break;
	case'n':
		{
		xil_printf( "\r\ninput pat:");
		scanf("%x",&tst);
		xil_printf( "[%x]",tst);
		btst=(tst&0x3f)<<2;
		mod_wr_spi_ad(0x40,btst);
		xil_printf( "\r\nrd_ad40[%x]",btst);
		btst=tst>>6;
		mod_wr_spi_ad(0x3f,btst);
		xil_printf( "\r\nrd_ad3f[%x]",btst);
		}
		break;

	case'd':
		{
		tst=rd_data_ad();
		xil_printf( "\r\ndata=[%x]",tst);
		}
		break;

	}
	}
////mod_wr_spi_ad(0x4,0x44);

usleep(2000);

///xil_printf( "\r\ncnt[%x]",tst );
///tst=rd_dat_fifo_sniff();
///xil_printf( "\r\ndat[%x]",tst );

}
#endif
///=====================
#if 0
set_spd_spi(18);
init_dac();

////set_spd_spi(18);
////wr_spi_dat(0x2,0x1234);
for(;;)
{
	tst=rd_spi_dat(ADDR_CONFIG4);

	xil_printf( "\r\n0[%x]",tst );

	tst=rd_spi_dat(ADDR_CONFIG6);
	xil_printf( "\r\n1[%x]",tst );
#if 0
	tst=rd_spi_dat(0x2);
	xil_printf( "\r\n2[%x]",tst );
	tst=rd_spi_dat(0x3);
	xil_printf( "\r\n3[%x]",tst );
	tst=rd_spi_dat(0x4);
	xil_printf( "\r\n4[%x]",tst );
	tst=rd_spi_dat(0x5);
	xil_printf( "\r\n5[%x]",tst );
#endif
////	put_mux(btst);
///	wr_spi_dat(0x31);
	btst++;
	usleep(500);
}
#endif
}
